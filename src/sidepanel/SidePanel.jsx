import { useState, useEffect } from 'react'
import styled from 'styled-components'
import FontSizeToggle from '../components/FontSizeToggle'
import { fontSizeMap } from '../constants/fontSizes'
import { SummaryBox } from '../components/SummaryBox'
import { Modal } from '../components/Modal'
import { createPortal } from 'react-dom';

const Container = styled.main`
  text-align: center;
  padding: 1em;
  margin: 0 auto;
  font-size: 1.25rem;
  line-height: 1.6;
`

const Title = styled.h3`
  color: #61dafb;
  text-transform: uppercase;
  font-size: 1.4em;
  font-weight: 500;
  line-height: 1.3;
  margin: 2rem auto;
`
const UrlBox = styled.div`
  background-color: #f9f9f9;
  padding: 1rem;
  border-radius: 10px;
  margin-top: 1.5rem;
  text-align: left;
  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
  max-width: 90%;
  margin-inline: auto;
  white-space: pre-wrap;
`
const UrlText = styled.p`
  word-break: break-all;
  font-size: 1rem;
`

const Actions = styled.div`
  display: flex;
  flex-direction: column;
  align-items: center;
  margin: 2rem 0;
  gap: 1rem;
`

const Button = styled.button`
  background-color: #007acc;
  color: white;
  border: none;
  border-radius: 0.5rem;
  padding: 0.8em 1.5em;
  font-size: 1em;
  cursor: pointer;
  width: 85%;
  max-width: 300px;
  transition: background-color 0.2s ease-in-out;

  &:hover {
    background-color: #005999;
  }

  &:focus {
    outline: 3px solid #ffffff;
    outline-offset: 2px;
  }
`

const StyledLink = styled.a`
  font-size: 0.8em;
  margin: 0.5rem;
  color: #cccccc;
  text-decoration: none;

  &:hover {
    color: #61dafb;
  }
`

export const SidePanel = () => {
  const [currentUrl, setCurrentUrl] = useState('')
  const [fontSizeLevel, setFontSizeLevel] = useState('medium')
  const [summary, setSummary] = useState(null)
  // const [showSummary, setShowSummary] = useState(false)
  const [openModal, setOpenModal] = useState(false)

  const fontSizeStyle = {
    fontSize: fontSizeMap[fontSizeLevel],
  }

  const fetchCurrentTabUrl = () => {
    chrome.tabs.query({ active: true, currentWindow: true }, (tabs) => {
      if (tabs.length > 0) {
        setCurrentUrl(tabs[0].url)
      }
    })
  }

  useEffect(() => {
    fetchCurrentTabUrl()
    chrome.tabs.onActivated.addListener(fetchCurrentTabUrl)

    chrome.tabs.onUpdated.addListener((tabId, changeInfo, tab) => {
      if (tab.active && changeInfo.url) {
        setCurrentUrl(changeInfo.url)
      }
    })

    return () => {
      chrome.tabs.onActivated.removeListener(fetchCurrentTabUrl)
      chrome.tabs.onUpdated.removeListener(() => { })
    }
  }, [])

  const handleSummarize = () => {
    chrome.storage.local.get(['gptSummary'], (res) => {
      console.log('[📦 sidepanel에서 받은 요약]', res.gptSummary)
      if (res.gptSummary && typeof res.gptSummary === 'object') {
        setSummary(res.gptSummary)
        setOpenModal(true)
      } else {
        setSummary({ title: '요약 없음', summary: '요약된 정보가 없습니다.' })
        setOpenModal(true)
      }
    })
  }

  const handleTTS = () => {
    if (summary?.summary) {
      const utterance = new SpeechSynthesisUtterance(summary.summary)
      speechSynthesis.speak(utterance)
    } else {
      alert('요약된 내용이 없습니다.')
    }
  }

  return (
    <Container style={fontSizeStyle}>
      <Title>FISA Extension</Title>

      <Actions>
        <Button onClick={handleSummarize}>📝 요약하기</Button>
        <Button onClick={handleTTS}>🔊 TTS 실행</Button>
      </Actions>

      <Title>현재 탭 URL</Title>
      <UrlBox>
        <UrlText>{currentUrl}</UrlText>
      </UrlBox>


      {openModal && summary && createPortal(
        <Modal
          onClose={() => setOpenModal(false)}
          title={summary.title}
          summary={summary.summary}
        >
        </Modal>,
        document.body
      )}


      <FontSizeToggle currentSize={fontSizeLevel} onChange={setFontSizeLevel} />
      <StyledLink
        href="https://github.com/guocaoyi/create-chrome-ext"
        target="_blank"
        rel="noreferrer"
      >
        generated by create-chrome-ext
      </StyledLink>
    </Container>
  )
}

export default SidePanel
